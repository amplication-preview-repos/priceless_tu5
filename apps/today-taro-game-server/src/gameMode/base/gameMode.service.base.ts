/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, GameMode as PrismaGameMode } from "@prisma/client";

export class GameModeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.GameModeCountArgs, "select">): Promise<number> {
    return this.prisma.gameMode.count(args);
  }

  async gameModes(
    args: Prisma.GameModeFindManyArgs
  ): Promise<PrismaGameMode[]> {
    return this.prisma.gameMode.findMany(args);
  }
  async gameMode(
    args: Prisma.GameModeFindUniqueArgs
  ): Promise<PrismaGameMode | null> {
    return this.prisma.gameMode.findUnique(args);
  }
  async createGameMode(
    args: Prisma.GameModeCreateArgs
  ): Promise<PrismaGameMode> {
    return this.prisma.gameMode.create(args);
  }
  async updateGameMode(
    args: Prisma.GameModeUpdateArgs
  ): Promise<PrismaGameMode> {
    return this.prisma.gameMode.update(args);
  }
  async deleteGameMode(
    args: Prisma.GameModeDeleteArgs
  ): Promise<PrismaGameMode> {
    return this.prisma.gameMode.delete(args);
  }
}
