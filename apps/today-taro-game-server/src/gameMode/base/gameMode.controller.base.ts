/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GameModeService } from "../gameMode.service";
import { GameModeCreateInput } from "./GameModeCreateInput";
import { GameMode } from "./GameMode";
import { GameModeFindManyArgs } from "./GameModeFindManyArgs";
import { GameModeWhereUniqueInput } from "./GameModeWhereUniqueInput";
import { GameModeUpdateInput } from "./GameModeUpdateInput";

export class GameModeControllerBase {
  constructor(protected readonly service: GameModeService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: GameMode })
  async createGameMode(
    @common.Body() data: GameModeCreateInput
  ): Promise<GameMode> {
    return await this.service.createGameMode({
      data: data,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [GameMode] })
  @ApiNestedQuery(GameModeFindManyArgs)
  async gameModes(@common.Req() request: Request): Promise<GameMode[]> {
    const args = plainToClass(GameModeFindManyArgs, request.query);
    return this.service.gameModes({
      ...args,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: GameMode })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async gameMode(
    @common.Param() params: GameModeWhereUniqueInput
  ): Promise<GameMode | null> {
    const result = await this.service.gameMode({
      where: params,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: GameMode })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateGameMode(
    @common.Param() params: GameModeWhereUniqueInput,
    @common.Body() data: GameModeUpdateInput
  ): Promise<GameMode | null> {
    try {
      return await this.service.updateGameMode({
        where: params,
        data: data,
        select: {
          createdAt: true,
          description: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: GameMode })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteGameMode(
    @common.Param() params: GameModeWhereUniqueInput
  ): Promise<GameMode | null> {
    try {
      return await this.service.deleteGameMode({
        where: params,
        select: {
          createdAt: true,
          description: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
