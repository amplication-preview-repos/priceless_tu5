/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { GameMode } from "./GameMode";
import { GameModeCountArgs } from "./GameModeCountArgs";
import { GameModeFindManyArgs } from "./GameModeFindManyArgs";
import { GameModeFindUniqueArgs } from "./GameModeFindUniqueArgs";
import { CreateGameModeArgs } from "./CreateGameModeArgs";
import { UpdateGameModeArgs } from "./UpdateGameModeArgs";
import { DeleteGameModeArgs } from "./DeleteGameModeArgs";
import { GameModeService } from "../gameMode.service";
@graphql.Resolver(() => GameMode)
export class GameModeResolverBase {
  constructor(protected readonly service: GameModeService) {}

  async _gameModesMeta(
    @graphql.Args() args: GameModeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [GameMode])
  async gameModes(
    @graphql.Args() args: GameModeFindManyArgs
  ): Promise<GameMode[]> {
    return this.service.gameModes(args);
  }

  @graphql.Query(() => GameMode, { nullable: true })
  async gameMode(
    @graphql.Args() args: GameModeFindUniqueArgs
  ): Promise<GameMode | null> {
    const result = await this.service.gameMode(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => GameMode)
  async createGameMode(
    @graphql.Args() args: CreateGameModeArgs
  ): Promise<GameMode> {
    return await this.service.createGameMode({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => GameMode)
  async updateGameMode(
    @graphql.Args() args: UpdateGameModeArgs
  ): Promise<GameMode | null> {
    try {
      return await this.service.updateGameMode({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => GameMode)
  async deleteGameMode(
    @graphql.Args() args: DeleteGameModeArgs
  ): Promise<GameMode | null> {
    try {
      return await this.service.deleteGameMode(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
